"""
Django settings for weather project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import json
import os
from pathlib import Path

import environ

from weather.weather_logger import CustomisedJSONFormatter
# from cmreslogging.handlers import CMRESHandler

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'), overwrite=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'
ENVIRONMENT = os.getenv('ENVIRONMENT', 'local')

ALLOWED_HOSTS = json.loads(os.getenv('ALLOWED_HOSTS', '["*"]'))

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = (
    'GET',
    'POST',
    'PUT',
    'DELETE',
    'OPTIONS'
)

CORS_ALLOW_HEADERS = (
    'x-requested-with',
    'content-type',
    'accept',
    'origin',
    'authorization',
    'x-csrftoken',
    'accept-encoding',
    'HTTP_ACCEPT_LANGUAGE',
    'Accept-Language'
)

CSRF_TRUSTED_ORIGINS = json.loads(os.getenv('CSRF_TRUSTED_ORIGINS', '["http://127.0.0.1:8000"]'))


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'web',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'weather.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'weather.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASE_URL = os.getenv('DATABASE_URL', '')

DATABASES = {
    'default': env.db_url_config(DATABASE_URL, engine='django.db.backends.mysql')
}

DATABASES['default']['OPTIONS'] = {
    'init_command': "SET NAMES 'utf8mb4' COLLATE 'utf8mb4_unicode_ci';SET sql_mode='STRICT_TRANS_TABLES'",
    'charset': 'utf8mb4',
}

DATABASES['default']['TEST'] = {
    'NAME': f'test_{DATABASES["default"]["NAME"]}',
    'CHARSET': 'utf8mb4',
    'COLLATION': 'utf8mb4_general_ci'
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = os.getenv('TIME_ZONE', 'Asia/Singapore')

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
REDIS_URL = os.getenv('REDIS_URL', 'redis://:@127.0.0.1:6379')
REDIS_PORT = os.getenv('REDIS_PORT', '6379')
REDIS_USERNAME = os.getenv('REDIS_USERNAME', '')
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD', '')
WEATHER_API_ENDPOINT = os.getenv('WEATHER_API_ENDPOINT', 'https://api.weather.gov/')
DEFAULT_LOCATION_ID = int(os.getenv('DEFAULT_LOCATION_ID', '1'))
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://:@127.0.0.1:6379/1')
CELERY_ALWAYS_EAGER = os.getenv("CELERY_ALWAYS_EAGER", "False") == "True"
CELERY_TIME_LIMIT = int(os.getenv("CELERY_TIME_LIMIT", 3600))
CELERY_SOFT_TIME_LIMIT = int(os.getenv("CELERY_SOFT_TIME_LIMIT", 3600))

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": REDIS_URL
    }
}

INDEX_VIEW_CACHE_TIME = int(os.getenv("INDEX_VIEW_CACHE_TIME", 120))
LOG_DIR = os.path.join(BASE_DIR, "logs", os.getenv("LOG_DIR", ""))
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s\t%(asctime)s\t%(module)s\t%(process)d\t%(thread)d\t%(message)s'
        },
        'standard': {
            'format': '%(levelname)s\t%(asctime)s\t%(funcName)s:%(lineno)s\t%(message)s'
        },
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[%(server_time)s] %(message)s',
        },
        'json': {
            '()': CustomisedJSONFormatter,
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
            'formatter': 'standard'
        },
        'console_on_not_debug': {
            'level': 'WARNING',
            'filters': ['require_debug_false'],
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'weather.log'),
            'maxBytes': 1024 * 1024 * 15,  # 15MB
            'backupCount': 10,
            'formatter': 'json',
        },
        # 'elasticsearch': {
        #     'level': 'DEBUG',
        #     'class': 'cmreslogging.handlers.CMRESHandler',
        #     'hosts': ELASTIC_SEARCH_SETTINGS.get('hosts'),
        #     'es_index_name': ELASTIC_SEARCH_INDEXES.get('logging'),
        #     "index_name_frequency": CMRESHandler.IndexNameFrequency.MONTHLY,
        #     'es_additional_fields': {'environment': ENVIRONMENT},
        #     'auth_type': CMRESHandler.AuthType(ELASTIC_SEARCH_SETTINGS.get('auth_type', 0)),
        # },
    },
    'loggers': {  # Replace `file` by `elasticsearch` if we want to push logs into ELK
        # 'django.db.backends': {
        #     'handlers': ['console',],
        #     'level': 'DEBUG',
        #     'propagate': False,
        # },
        'api': {
            'level': 'INFO',
            'handlers': ['console', 'file', ],
            'propagate': False,
        },
        'admin': {
            'level': 'INFO',
            'handlers': ['console', 'file'],
            'propagate': False,
        },
        'backend': {
            'level': 'INFO',
            'handlers': ['console', 'file'],
            'propagate': False,
        },
        'celery': {
            'level': 'ERROR',
            'handlers': ['console', 'file'],
            'propagate': False,
        },
        'django': {
            'level': 'INFO',
            'handlers': ['console', 'file'],
            'propagate': False,
        },
        # 'root': {
        #     'level': 'DEBUG',
        #     'handlers': ['console',],
        #     'propagate': True,
        # },
    }
}

LOGGING_CONFIG = "logging.config.dictConfig"
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', None)
TELEGRAM_CHAT_TOKEN = os.getenv('TELEGRAM_CHAT_TOKEN', None)
